/*
Description
Data about sales in an e-commerce company (the e-commerce company has several shops) consists a sequence of lines, each line (represents an order) has the following information:
            <CustomerID> <ProductID> <Price> <ShopID> <TimePoint>
in which the customer <CustomerID> buys a product <ProductID> with price <Price> at the shop <ShopID> at the time-point <TimePoint>
<CustomerID>: string of length from 3 to 10
<ProductID>: string of length from 3 to 10
<Price>: a positive integer from 1 to 1000
<ShopID>: string of length from 3 to 10
<TimePoint>: string representing time-point with the format HH:MM:SS (for example, 09:45:20 means the time-point 9 hour 45 minutes 20 seconds)


Perform a sequence of queries of following types:
?total_number_orders: return the total number of orders
?total_revenue: return the total revenue the e-commerce company gets
?revenue_of_shop <ShopID>: return the total revenue the shop <ShopID> gets 
?total_consume_of_customer_shop <CustomerID> <ShopID>: return the total revenue the shop <ShopID> sells products to customer <CustomerID> 
?total_revenue_in_period <from_time> <to_time>: return the total revenue the e-commerce gets of the period from <from_time> to <to_time> (inclusive)

Input
The input consists of two blocks of data:
The first block is the operational data, which is a sequence of lines (number of lines can be upto 100000), each line contains the information of a submission with above format 
The first block is terminated with a line containing the character #
The second block is the query block, which is a sequence of lines (number of lines can be upto 100000), each line is a query described above
The second block is terminated with a line containing the character #

Output
Write in each line, the result of the corresponding query 

Example
Input
C001 P001 10 SHOP001 10:30:10
C001 P002 30 SHOP001 12:30:10
C003 P001 40 SHOP002 10:15:20
C001 P001 80 SHOP002 08:40:10
C002 P001 130 SHOP001 10:30:10
C002 P001 160 SHOP003 11:30:20
#
?total_number_orders
?total_revenue
?revenue_of_shop SHOP001
?total_consume_of_customer_shop C001 SHOP001 
?total_revenue_in_period 10:00:00 18:40:45
#

*/

#include <bits/stdc++.h>
using namespace std;

struct Transaction {
    string customerID;
    string productID;
    int price;
    string shopID;
    string timePoint;
};

vector<Transaction> transactions;
vector<string> commands;

unordered_map<string, int> shopRevenue;
vector<int> timePointRevenue(24 * 3600 + 1, 0);
unordered_map<string, int> customerShopRevenue;
int totalRevenue = 0;
vector<int> cumulativeRevenue(24 * 3600 + 1, 0);

int timeOf(string time) {
    int hour, minute, second;
    istringstream iss(time);
    char c; 
    iss >> hour >> c >> minute >> c >> second;
    return hour * 3600 + minute * 60 + second;
}

int main() {
    string input;
    while(true) {
        getline(cin, input);
        if(input == "#") break; 
        Transaction tempTransaction;
        istringstream iss(input);
        iss >> tempTransaction.customerID >> tempTransaction.productID >> tempTransaction.price >> tempTransaction.shopID >> tempTransaction.timePoint;

        shopRevenue[tempTransaction.shopID] += tempTransaction.price;
        timePointRevenue[timeOf(tempTransaction.timePoint)] += tempTransaction.price;
        customerShopRevenue[tempTransaction.customerID + tempTransaction.shopID] += tempTransaction.price;
        totalRevenue += tempTransaction.price;

        transactions.push_back(tempTransaction);
    }

    cumulativeRevenue[0] = timePointRevenue[0];
    for(int i = 1; i <= 24 * 3600; i++) {
        cumulativeRevenue[i] = cumulativeRevenue[i - 1] + timePointRevenue[i];
    }

    while(true) {
        getline(cin, input);
        if(input == "#") break;
        commands.push_back(input);
    }

    for(auto command : commands) {
        istringstream iss(command);
        string operation, arg1, arg2;
        iss >> operation;
        
        if(operation == "?total_number_orders") {
            printf("%lu\n", transactions.size());
        }
        if(operation == "?total_revenue") {
            printf("%d\n", totalRevenue);
        }
        if(operation == "?revenue_of_shop") {
            iss >> arg1;
            printf("%d\n", shopRevenue[arg1]);
        }
        if(operation == "?total_consume_of_customer_shop") {
            iss >> arg1 >> arg2;
            printf("%d\n", customerShopRevenue[arg1 + arg2]);
        }
        if(operation == "?total_revenue_in_period") {
            iss >> arg1 >> arg2;
            int result = 0;
            int fromTime = timeOf(arg1);
            int toTime  = timeOf(arg2);
            result = cumulativeRevenue[toTime] - cumulativeRevenue[fromTime - 1];
            printf("%d\n", result);
        }
    }
    return 0;
}
